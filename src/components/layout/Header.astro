---
import type {
    Article,
    Clang,
    NavigationItem as INavigationItem,
} from 'redaxo-adapter';

import Logo from '../atoms/Logo';
import Hamburger from '../atoms/Hamburger';
import NavigationItem from '../atoms/NavigationItem.astro';
import LanguagePicker from './LanguagePicker.astro';
import Container from './Container';

interface Props {
    navigation: INavigationItem[];
    siteStartArticle: Article;
    clangs: Clang[];
    clang: Clang;
}

const { navigation, siteStartArticle, clangs, clang } = Astro.props;
---

<header
    class="fixed top-0 z-50 flex h-16 w-full items-center bg-gray-100 md:h-20 xl:h-24"
    data-header-section
>
    <Container>
        <div class="flex gap-6">
            <div class="w-5/12 md:w-3/12 xl:w-2/12">
                <Logo siteStartArticle={siteStartArticle} />
            </div>
            <div class="w-7/12 md:w-9/12 lg:flex-grow-0 xl:w-10/12">
                <nav
                    class="hidden h-full w-full items-center justify-end xl:flex"
                >
                    <ul class="flex">
                        {
                            navigation
                                .filter((c) => c.parentId == null)
                                .map((category) => (
                                    <NavigationItem
                                        {...category}
                                        children={navigation.filter(
                                            (c) => c.parentId == category.id,
                                        )}
                                    />
                                ))
                        }
                    </ul>
                    <LanguagePicker clangs={clangs} />
                </nav>
                <div
                    class="flex h-full w-full items-center justify-end xl:hidden"
                >
                    <Hamburger client:visible />
                </div>
            </div>
        </div>
    </Container>
</header>

<script>
    const header = document.querySelector('[data-header-section]');
    let lastScrollPosition = window.scrollY;
    let disapperarThreshold = header?.scrollHeight || 10;

    const checkHeaderVisibility = () => {
        const currentScrollPos = window.scrollY;
        if (currentScrollPos > disapperarThreshold) {
            if (currentScrollPos < lastScrollPosition) {
                header?.classList.remove('header-hide');
            } else {
                header?.classList.add('header-hide');
            }
        } else {
            header?.classList.remove('header-hide');
        }
        lastScrollPosition = currentScrollPos;
    };

    checkHeaderVisibility();
    document.addEventListener('scroll', checkHeaderVisibility);
    document.addEventListener('astro:beforeload', checkHeaderVisibility);
    document.addEventListener('astro:page-load', checkHeaderVisibility);
</script>

<style is:global lang="scss">
    header {
        @apply transition-all duration-500;

        &.header-hide {
            @apply -translate-y-full opacity-0;
        }
    }
</style>
